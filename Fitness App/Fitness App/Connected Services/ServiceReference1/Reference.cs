//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Fitness_App.ServiceReference1 {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.CRUDServiceSoap")]
    public interface CRUDServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAll", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/insertdb", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool insertdb(string date, string workout, string weight, string sets, string reps, string duration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/insertdb", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> insertdbAsync(string date, string workout, string weight, string sets, string reps, string duration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updatedb", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool updatedb(int id, string date, string workout, string weight, string sets, string reps, string duration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updatedb", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> updatedbAsync(int id, string date, string workout, string weight, string sets, string reps, string duration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/delete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/delete", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> deleteAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CRUDServiceSoapChannel : Fitness_App.ServiceReference1.CRUDServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CRUDServiceSoapClient : System.ServiceModel.ClientBase<Fitness_App.ServiceReference1.CRUDServiceSoap>, Fitness_App.ServiceReference1.CRUDServiceSoap {
        
        public CRUDServiceSoapClient() {
        }
        
        public CRUDServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CRUDServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CRUDServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CRUDServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataTable GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public bool insertdb(string date, string workout, string weight, string sets, string reps, string duration) {
            return base.Channel.insertdb(date, workout, weight, sets, reps, duration);
        }
        
        public System.Threading.Tasks.Task<bool> insertdbAsync(string date, string workout, string weight, string sets, string reps, string duration) {
            return base.Channel.insertdbAsync(date, workout, weight, sets, reps, duration);
        }
        
        public bool updatedb(int id, string date, string workout, string weight, string sets, string reps, string duration) {
            return base.Channel.updatedb(id, date, workout, weight, sets, reps, duration);
        }
        
        public System.Threading.Tasks.Task<bool> updatedbAsync(int id, string date, string workout, string weight, string sets, string reps, string duration) {
            return base.Channel.updatedbAsync(id, date, workout, weight, sets, reps, duration);
        }
        
        public bool delete(int id) {
            return base.Channel.delete(id);
        }
        
        public System.Threading.Tasks.Task<bool> deleteAsync(int id) {
            return base.Channel.deleteAsync(id);
        }
    }
}
